/* CTF 1.8 */

/* This was generated by a Babeltrace `sink.ctf.fs` component. */

trace {
	major = 1;
	minor = 8;
	uuid = "d46fe75f-b972-4028-becb-162b188efe20";
	byte_order = le;
	packet.header := struct {
		integer { size = 32; align = 8; base = x; } magic;
		integer { size = 8; align = 8; } uuid[16];
		integer { size = 64; align = 8; } stream_id;
		integer { size = 64; align = 8; } stream_instance_id;
	} align(8);
};

env {
	hostname = "l4re_trace";
	domain = "kernel";
	tracer_name = "lttng-modules";
	input_file = "dump";
	trace_creation_datetime = "20250319T152518+0000";
	trace_creation_datetime_utc = "2025-03-19 15:25:18.633310540 UTC";
};

clock {
	name = monotonic;
	freq = 1000000000;
	precision = 0;
	offset_s = 0;
	offset = 0;
	absolute = false;
};

stream {
	id = 0;
	packet.context := struct {
		integer { size = 64; align = 8; } packet_size;
		integer { size = 64; align = 8; } content_size;
		integer { size = 64; align = 8; } events_discarded;
		integer { size = 64; align = 8; } packet_seq_num;
		integer { size = 64; align = 8; } _cpu_id;
	} align(8);

	event.header := struct {
		integer { size = 64; align = 8; } id;
		integer { size = 64; align = 8; map = clock.monotonic.value; } timestamp;
	} align(8);
	event.context := struct {
		integer { size = 64; align = 8; base = x; } _id;
		integer { size = 64; align = 8; } _event_count;
		integer { size = 64; align = 8; base = x; } _ip;
		integer { size = 64; align = 8; } _timer;
		integer { size = 64; align = 8; base = x; } _ctx;
		integer { size = 64; align = 8; } _pmc1;
		integer { size = 64; align = 8; } _pmc2;
		integer { size = 64; align = 8; } _kclock;
	} align(8);
};

event {
	name = "sched_switch";
	stream_id = 0;
	id = 0;
	fields := struct {
		string { encoding = UTF8; } _src_event_type;
		string { encoding = UTF8; } _prev_comm;
		integer { size = 64; align = 8; signed = true; } _prev_tid;
		integer { size = 64; align = 8; signed = true; } _prev_prio;
		enum : integer { size = 64; align = 8; signed = true; } {
			"TASK_RUNNING" = 0,
			"TASK_INTERRUPTIBLE" = 1,
			"TASK_UNINTERRUPTIBLE" = 2,
			"TASK_STOPPED" = 4,
			"TASK_TRACED" = 8,
			"EXIT_DEAD" = 16,
			"EXIT_ZOMBIE" = 32,
			"TASK_PARKED" = 64,
			"TASK_DEAD" = 128,
			"TASK_WAKEKILL" = 256,
			"TASK_WAKING" = 512,
			"TASK_NOLOAD" = 1024,
			"TASK_NEW" = 2048,
		} _prev_state;
		string { encoding = UTF8; } _next_comm;
		integer { size = 64; align = 8; signed = true; } _next_tid;
		integer { size = 64; align = 8; signed = true; } _next_prio;
	} align(8);
};

event {
	name = "PF";
	stream_id = 0;
	id = 1;
	fields := struct {
		integer { size = 64; align = 8; } _pfa;
		integer { size = 64; align = 8; } _error;
		integer { size = 64; align = 8; } _space;
	} align(8);
};

event {
	name = "IPC";
	stream_id = 0;
	id = 2;
};

event {
	name = "IPCRES";
	stream_id = 0;
	id = 3;
};

